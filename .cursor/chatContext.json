{
  "description": "CRM Lovable is a customer relationship management system built with Vite, React, ShadCN, and TypeScript. Following a frontend-first development approach.",
  "instructions": [
    "Development Flow:",
    "1. Frontend Development First:",
    "   - Build and complete all UI components",
    "   - Use mock data from /src/data/mockData.ts",
    "   - Document component requirements in component headers",
    "   - Track database needs in component comments with @database tag",
    
    "2. Database Implementation Later:",
    "   - Create schema after frontend is complete",
    "   - Implement based on collected requirements",
    "   - Replace mock data with real database calls",
    
    "Documentation Structure:",
    "1. Component Documentation:",
    "   - Add detailed comments above each component",
    "   - Include @database tags for database requirements",
    "   - Document props and state management",
    "   - Note any permissions required",
    
    "2. Database Documentation:",
    "   - /docs/database/requirements.md:",
    "     * Core functionality needs",
    "     * Data relationships",
    "     * Performance requirements",
    "     * Security considerations",
    "   - /docs/database/schema.md (for schema definitions)",
    "   - /docs/database/design-decisions.md (for architectural choices)",
    "- Keep feature specifications in /docs/features/",
    "- Track TODOs in component files and TODO.md",
    
    "Code Organization:",
    "- Group components by feature",
    "- Use TypeScript interfaces for data structures",
    "- Follow ShadcCN patterns",
    "- Keep mock data in separate files",

    "Technical Implementation Guidelines:",
    "1. Component Design:",
    "   - Create small, focused components (50 lines or less)",
    "   - Always implement responsive designs",
    "   - Use shadcn/ui components when possible",
    "   - Use Tailwind CSS for styling",
    "   - Create new files for new components, never add to existing files",
    
    "2. State Management:",
    "   - Use @tanstack/react-query for data fetching",
    "   - Configure queries using object format",
    "   - Use toast components for user notifications",
    
    "3. Error Handling:",
    "   - Allow errors to bubble up during development",
    "   - Only use try/catch when specifically required",
    
    "4. UI Components:",
    "   - Use lucide-react for icons",
    "   - Use recharts for charts/graphs",
    "   - Implement permission guards for protected content",
    
    "5. Code Quality:",
    "   - Regularly refactor large files (>100 lines)",
    "   - Ensure all imports reference existing files",
    "   - Follow existing code style and conventions",
    "   - Write complete, syntactically correct code"
  ]
}